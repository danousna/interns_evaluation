package com.sr03.dao;

import src.com.sr03.beans.UserModel;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import static com.sr03.dao.DAOUtility.*;

public class UserDaoImpl implements UserDao {
    private DAOFactory daoFactory;
    private static final String SQL_SELECT_BY_EMAIL = "SELECT id, email, nom, mot_de_passe, date_inscription FROM Utilisateur WHERE email = ?";
    private static final String SQL_INSERT = "INSERT INTO Utilisateur (email, mot_de_passe, nom, date_inscription) VALUES (?, ?, ?, NOW())";

    UserDaoImpl(DAOFactory daoFactory) {
        this.daoFactory = daoFactory;
    }

    @Override
    public UserModel find(String email) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        UserModel userModel = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_SELECT_BY_EMAIL, false, email);
            resultSet = preparedStatement.executeQuery();
            /* Parcours de la ligne de données de l'eventuel ResultSet retourné */
            if (resultSet.next()) {
                userModel = map(resultSet);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(resultSet, preparedStatement, conn);
        }

        return userModel;
    }

    @Override
    public void create(UserModel user) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_INSERT, true, user.getEmail());
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Échec de la création de l'utilisateur, aucune ligne ajoutées dans la table.");
            }

            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if (autoGeneratedValues.next()) {
                user.setId(autoGeneratedValues.getLong(1));
            } else {
                throw new DAOException("Échec de la création de l'utilisateur en base, aucun ID auto-généré retourné.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(autoGeneratedValues, preparedStatement, conn);
        }
    }

    /*
     * Simple méthode utilitaire permettant de faire la correspondance (le
     * mapping) entre une ligne issue de la table des utilisateurs (un
     * ResultSet) et un bean User.
     */
    private static UserModel map(ResultSet resultSet) throws SQLException {
        User user = new User();
        user.setId( resultSet.getLong( "id" ) );
        user.setEmail( resultSet.getString( "email" ) );
        user.setMotDePasse( resultSet.getString( "mot_de_passe" ) );
        user.setNom( resultSet.getString( "nom" ) );
        user.setDateInscription( resultSet.getTimestamp( "date_inscription" ) );
        return user;
    }
}

