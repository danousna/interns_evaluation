package com.sr03.dao;

import com.sr03.entities.QuizEntity;

import java.sql.*;
import java.util.ArrayList;

import static com.sr03.dao.DAOUtility.*;

public class QuizDAO implements DAO<QuizEntity> {
    private DAOFactory daoFactory;
    private static final String SQL_SELECT_ALL = "SELECT * FROM quizzes";
    private static final String SQL_SELECT_BY_ID = "SELECT * FROM quizzes WHERE id = ?";
    private static final String SQL_INSERT = "INSERT INTO quizzes (name, is_active, subject_id) VALUES (?, ?, ?)";
    private static final String SQL_UPDATE = "UPDATE quizzes SET name = ?, subject_id, is_active = ?, is_admin = ? WHERE id = ?";
    private static final String SQL_DELETE = "DELETE FROM quizzes WHERE id = ?";

    QuizDAO(DAOFactory daoFactory) { this.daoFactory = daoFactory; }

    @Override
    public void create(QuizEntity quiz) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_INSERT, true,
                    quiz.getName(),
                    quiz.getIs_active(),
                    quiz.getSubject_id()
            );

            int status = preparedStatement.executeUpdate();
            if (status == 0) {
                throw new DAOException("Échec de la création du questionnaire, aucune ligne ajoutées dans la table.");
            }

            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if (autoGeneratedValues.next()) {
                quiz.setId(autoGeneratedValues.getLong(1));
            } else {
                throw new DAOException("Échec de la création du questionnaire en base, aucun ID auto-généré retourné.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(autoGeneratedValues, preparedStatement, conn);
        }
    }

    @Override
    public QuizEntity get(Long id) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        QuizEntity quiz = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_SELECT_BY_ID, false, id);
            resultSet = preparedStatement.executeQuery();

            /* Parcours de la ligne de données de l'eventuel ResultSet retourné */
            if (resultSet.next()) {
                quiz = map(resultSet);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(resultSet, preparedStatement, conn);
        }

        return quiz;
    }

    public ArrayList<QuizEntity> getAll() throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        ArrayList<QuizEntity> quizzes = new ArrayList<>();

        try {
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_SELECT_ALL, false);
            resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                quizzes.add(map(resultSet));
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(resultSet, preparedStatement, conn);
        }

        return quizzes;
    }

    @Override
    public void update(QuizEntity quiz) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_UPDATE, true/*, liste de paramètres à mettre correspondant à la requête */);
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Echec : on sait pas pourquoi, mais echec");
            }

            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if (autoGeneratedValues.next()) {
                quiz.setId(autoGeneratedValues.getLong(1));
            } else {
                throw new DAOException("Echec : on sait pas pourquoi non plus, mais echec");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(autoGeneratedValues, preparedStatement, conn);
        }
    }

    @Override
    public void delete(QuizEntity quiz) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_DELETE, true/*, liste de paramètres à mettre correspondant à la requête */);
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Echec");
            }

            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if (autoGeneratedValues.next()) {
                quiz.setId(autoGeneratedValues.getLong(1));
            } else {
                throw new DAOException("Echec");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(autoGeneratedValues, preparedStatement, conn);
        }
    }

    /*
     * Simple méthode utilitaire permettant de faire la correspondance (le
     * mapping) entre une ligne issue de la table des quizzes (un
     * ResultSet) et un bean Quiz.
     */
    private static QuizEntity map(ResultSet resultSet) throws SQLException {
        return new QuizEntity(
                resultSet.getLong("id"),
                resultSet.getString("name"),
                resultSet.getBoolean("is_active"),
                resultSet.getLong("subject_id")

        );
    }
}
