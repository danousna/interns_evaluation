package com.sr03.dao;

import com.sr03.entities.QuestionEntity;

import java.sql.*;
import java.util.ArrayList;

import static com.sr03.dao.DAOUtility.*;

public class QuestionDAO extends DAO<QuestionEntity> {
    private static final String SQL_INSERT = "INSERT INTO questions (body, is_active, order, quiz_id) VALUES (?, ?, ?, ?)";
    private static final String SQL_UPDATE = "UPDATE questions SET body = ?, is_active = ?, order = ?, quiz_id = ? WHERE id = ?";
    private static final String SQL_CHANGE_AVAILABILITY = "UPDATE questions SET is_active = (is_active + 1)%2 WHERE id = ?";

    QuestionDAO(DAOFactory daoFactory) {
        super(daoFactory, "questions");
        this.subjectDAO = new SubjectDAO(daoFactory);
    }

    @Override
    public QuestionEntity map(ResultSet resultSet) {
        QuestionEntity question = new QuestionEntity();
        try {
            question.setId(resultSet.getLong("id"));
            question.setBody(resultSet.getString("body"));
            question.setIs_active(resultSet.getBoolean("is_active"));
            question.setOrder(resultSet.getLong("order"));
            question.setQuiz_id(resultSet.getLong("quiz_id"));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return question;
    }

    @Override
    public QuestionEntity get(Long id) {
        QuestionEntity quiz = super.get(id);
        quiz.setSubject(subjectDAO.get(quiz.getSubject_id()));
        return quiz;
    }

    @Override
    public ArrayList<QuizEntity> getAll() {
        ArrayList<QuizEntity> quizzes = super.getAll();
        for (QuizEntity quiz : quizzes) {
            quiz.setSubject(subjectDAO.get(quiz.getSubject_id()));
        }
        return quizzes;
    }

    @Override
    public void create(QuizEntity quiz) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_INSERT, true,
                    quiz.getName(),
                    quiz.getIs_active(),
                    quiz.getSubject_id()
            );

            int status = preparedStatement.executeUpdate();
            if (status == 0) {
                throw new DAOException("Échec de la création du questionnaire.");
            }

            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if (autoGeneratedValues.next()) {
                quiz.setId(autoGeneratedValues.getLong(1));
            } else {
                throw new DAOException("Échec de la création du questionnaire.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(autoGeneratedValues, preparedStatement, conn);
        }
    }

    @Override
    public void update(QuizEntity quiz) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;

        try {
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_UPDATE, false,
                    quiz.getName(),
                    quiz.getIs_active(),
                    quiz.getSubject_id(),
                    quiz.getId()
            );
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Échec de la modification du sujet.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(preparedStatement, conn);
        }
    }

    public void changeQuizAvailability(long id) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;

        try {
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_CHANGE_AVAILABILITY, false, id);
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Echec du changement de disponibilité du sujet.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(preparedStatement, conn);
        }
    }
}
