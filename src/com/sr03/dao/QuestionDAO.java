package com.sr03.dao;

import com.sr03.entities.AnswerEntity;
import com.sr03.entities.QuestionEntity;

import java.sql.*;
import java.util.ArrayList;

import static com.sr03.dao.DAOUtility.*;

public class QuestionDAO extends DAO<QuestionEntity> {
    private static final String SQL_SELECT_ANSWERS_ALL = "SELECT * FROM answers WHERE question_id = ?";
    private static final String SQL_INSERT = "INSERT INTO questions (body, is_active, `order`, quiz_id) VALUES (?, ?, ?, ?)";
    private static final String SQL_UPDATE = "UPDATE questions SET body = ?, is_active = ?, `order` = ?, quiz_id = ? WHERE id = ?";
    private static final String SQL_CHANGE_AVAILABILITY = "UPDATE questions SET is_active = (is_active + 1)%2 WHERE id = ?";

    private AnswerDAO answerDAO;

    QuestionDAO(DAOFactory daoFactory) {
        super(daoFactory, "questions");
        this.answerDAO = DAOFactory.getInstance().getAnswerDAO();
    }

    @Override
    public QuestionEntity map(ResultSet resultSet) {
        QuestionEntity question = new QuestionEntity();
        try {
            question.setId(resultSet.getLong("id"));
            question.setBody(resultSet.getString("body"));
            question.setIs_active(resultSet.getBoolean("is_active"));
            question.setOrder(resultSet.getLong("order"));
            question.setQuiz_id(resultSet.getLong("quiz_id"));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return question;
    }

    @Override
    public QuestionEntity get(Long id) {
        QuestionEntity question = super.get(id);
        question.setAnswers(answerDAO.getManyQuery(SQL_SELECT_ANSWERS_ALL, question.getId()));
        return question;
    }

    @Override
    public ArrayList<QuestionEntity> getAll() {
        ArrayList<QuestionEntity> questions = super.getAll();
        for (QuestionEntity question : questions) {
            question.setAnswers(answerDAO.getManyQuery(SQL_SELECT_ANSWERS_ALL, question.getId()));
        }
        return questions;
    }

    @Override
    public void create(QuestionEntity question) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_INSERT, true,
                    question.getBody(),
                    question.getIs_active(),
                    question.getOrder(),
                    question.getQuiz_id()
            );

            int status = preparedStatement.executeUpdate();
            if (status == 0) {
                throw new DAOException("Échec de la création de la question.");
            }

            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if (autoGeneratedValues.next()) {
                question.setId(autoGeneratedValues.getLong(1));
            } else {
                throw new DAOException("Échec de la création de la question.");
            }

            // Question creation was a success, we can create answers now.
            for (AnswerEntity answer : question.getAnswers()) {
                answer.setQuestion_id(question.getId());
                answerDAO.create(answer);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new DAOException(e);
        } finally {
            silentClosures(autoGeneratedValues, preparedStatement, conn);
        }
    }

    @Override
    public void update(QuestionEntity question) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;

        try {
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_UPDATE, false,
                    question.getBody(),
                    question.getIs_active(),
                    question.getOrder(),
                    question.getQuiz_id(),
                    question.getId()
            );
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Échec de la modification de la question.");
            }

            // Question update was a success, we can update/create answers now.
            for (AnswerEntity answer : question.getAnswers()) {
                answer.setQuestion_id(question.getId());
                if (answer.getId() != null) {
                    answerDAO.update(answer);
                } else {
                    answerDAO.create(answer);
                }
            }

            // Update is tricky. We need to take into account potential answers that could have been deleted.
            // To avoid a complex solution, we solve by simply deleting all the question answers
            // and (re)creating all of the current ones.

            ArrayList<AnswerEntity> answers = answerDAO.getManyQuery(SQL_SELECT_ANSWERS_ALL, question.getId());
            for (AnswerEntity answer : answers) {
                answerDAO.delete(answer.getId());
            }

            // Question update was a success, we can (re)create answers now.
            for (AnswerEntity answer : question.getAnswers()) {
                answer.setQuestion_id(question.getId());
                answerDAO.create(answer);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(preparedStatement, conn);
        }
    }

    public void changeQuizAvailability(Long id) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_CHANGE_AVAILABILITY, false, id);
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Echec du changement de disponibilité de la question.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(preparedStatement, conn);
        }
    }
}
