package com.sr03.dao;

import com.sr03.entities.UserEntity;
import com.sun.tools.internal.xjc.reader.xmlschema.bindinfo.BIConversion;

import java.sql.*;
import java.util.ArrayList;

import static com.sr03.dao.DAOUtility.*;

public class UserDAO implements DAO<UserEntity> {
    private DAOFactory daoFactory;
    private static final String SQL_SELECT_ALL = "SELECT * FROM users";
    private static final String SQL_SELECT_BY_ID = "SELECT * FROM users WHERE id = ?";
    private static final String SQL_SELECT_BY_EMAIL = "SELECT * FROM users WHERE email = ?";
    private static final String SQL_INSERT = "INSERT INTO users (email, name, password, company, phone, created_at, is_active, is_admin) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
    private static final String SQL_UPDATE = "UPDATE users SET email = ?, name = ?, password = ?, company = ?, phone = ?, is_active = ?, is_admin = ? WHERE id = ?";
    private static final String SQL_CHANGE_ACTIVITY = "UPDATE users SET is_active = (is_active + 1)%2 WHERE id = ?";
    private static final String SQL_DELETE = "DELETE FROM users WHERE id = ?";

    UserDAO(DAOFactory daoFactory) {
        this.daoFactory = daoFactory;
    }

    @Override
    public void create(UserEntity user) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_INSERT, true,
                    user.getEmail(),
                    user.getName(),
                    user.getPassword(),
                    user.getCompany(),
                    user.getPhone(),
                    user.getCreated_at(),
                    user.getIs_active(),
                    user.getIs_admin()
            );

            int status = preparedStatement.executeUpdate();
            if (status == 0) {
                throw new DAOException("Échec de la création de l'utilisateur, aucune ligne ajoutées dans la table.");
            }

            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if (autoGeneratedValues.next()) {
                user.setId(autoGeneratedValues.getLong(1));
            } else {
                throw new DAOException("Échec de la création de l'utilisateur en base, aucun ID auto-généré retourné.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(autoGeneratedValues, preparedStatement, conn);
        }
    }

    @Override
    public UserEntity get(Long id) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        UserEntity user = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_SELECT_BY_ID, false, id);
            resultSet = preparedStatement.executeQuery();

            /* Parcours de la ligne de données de l'eventuel ResultSet retourné */
            if (resultSet.next()) {
                user = map(resultSet);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(resultSet, preparedStatement, conn);
        }

        return user;
    }

    public UserEntity get(String email) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        UserEntity user = null;

        try {
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_SELECT_BY_EMAIL, false, email);
            resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                user = map(resultSet);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(resultSet, preparedStatement, conn);
        }

        return user;
    }

    public ArrayList<UserEntity> getAll() throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        ArrayList<UserEntity> users = new ArrayList<>();

        try {
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_SELECT_ALL, false);
            resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                users.add(map(resultSet));
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(resultSet, preparedStatement, conn);
        }

        return users;
    }

    @Override
    public void update(UserEntity user) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_UPDATE, false,
                    user.getEmail(),
                    user.getName(),
                    user.getPassword(),
                    user.getCompany(),
                    user.getPhone(),
                    user.getIs_active(),
                    user.getIs_admin(),
                    user.getId()
            );
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Échec de la modification de l'utilisateur, aucune ligne ajoutées dans la table.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(autoGeneratedValues, preparedStatement, conn);
        }
    }

    @Override
    public void delete(Long id) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_DELETE, false, id);
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Echec");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(preparedStatement, conn);
        }
    }

    public void deleteUser(Long id) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_DELETE, true, id);
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Echec");
            }

        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(autoGeneratedValues, preparedStatement, conn);
        }
    }

    public void changeUserActivity(long id) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_CHANGE_ACTIVITY, false, id);
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Echec : on sait pas pourquoi, mais echec !");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(preparedStatement, conn);
        }
    }

    /*
     * Simple méthode utilitaire permettant de faire la correspondance (le
     * mapping) entre une ligne issue de la table des utilisateurs (un
     * ResultSet) et un bean User.
     */
    private static UserEntity map(ResultSet resultSet) throws SQLException {
        UserEntity user = new UserEntity();
        user.setId(resultSet.getLong("id"));
        user.setIs_active(resultSet.getBoolean("is_active"));
        user.setIs_admin(resultSet.getBoolean("is_admin"));
        user.setName(resultSet.getString("name"));
        user.setEmail(resultSet.getString("email"));
        user.setPassword(resultSet.getString("password"));
        user.setCompany(resultSet.getString("company"));
        user.setPhone(resultSet.getString("phone"));
        user.setCreated_at(resultSet.getTimestamp("created_at"));
        return user;
    }
}

