package com.sr03.dao;

import com.sr03.beans.Subject;
import com.sr03.entities.SubjectEntity;

import java.sql.*;
import java.util.ArrayList;

import static com.sr03.dao.DAOUtility.*;

public class SubjectDAO implements DAO<SubjectEntity> {
    private DAOFactory daoFactory;
    private static final String SQL_SELECT_ALL = "SELECT * FROM subjects";
    private static final String SQL_SELECT_BY_ID = "SELECT * FROM subjects WHERE id = ?";
    private static final String SQL_INSERT = "INSERT INTO subjects (name) VALUES (?)";
    private static final String SQL_UPDATE = "UPDATE subjects SET email = ?, name = ?, password = ?, company = ?, phone = ?, is_active = ?, is_admin = ? WHERE id = ?";
    private static final String SQL_DELETE = "DELETE FROM subjects WHERE id = ?";

    SubjectDAO(DAOFactory daoFactory) { this.daoFactory = daoFactory; }

    @Override
    public void create(SubjectEntity subject) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_INSERT, true,
                    subject.getName()
            );

            int status = preparedStatement.executeUpdate();
            if (status == 0) {
                throw new DAOException("Échec de la création du sujet, aucune ligne ajoutées dans la table.");
            }

            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if (autoGeneratedValues.next()) {
                subject.setId(autoGeneratedValues.getLong(1));
            } else {
                throw new DAOException("Échec de la création du sujet en base, aucun ID auto-généré retourné.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(autoGeneratedValues, preparedStatement, conn);
        }
    }

    @Override
    public SubjectEntity get(Long id) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        SubjectEntity subject = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_SELECT_BY_ID, false, id);
            resultSet = preparedStatement.executeQuery();

            /* Parcours de la ligne de données de l'eventuel ResultSet retourné */
            if (resultSet.next()) {
                subject = map(resultSet);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(resultSet, preparedStatement, conn);
        }

        return subject;
    }

    public ArrayList<SubjectEntity> getAll() throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        ArrayList<SubjectEntity> subjects = new ArrayList<>();

        try {
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_SELECT_ALL, false);
            resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                subjects.add(map(resultSet));
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(resultSet, preparedStatement, conn);
        }

        return subjects;
    }

    @Override
    public void update(SubjectEntity subject) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_UPDATE, true/*, liste de paramètres à mettre correspondant à la requête */);
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Echec : on sait pas pourquoi, mais echec");
            }

            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if (autoGeneratedValues.next()) {
                subject.setId(autoGeneratedValues.getLong(1));
            } else {
                throw new DAOException("Echec : on sait pas pourquoi non plus, mais echec");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(autoGeneratedValues, preparedStatement, conn);
        }
    }

    @Override
    public void delete(SubjectEntity subject) throws DAOException {
        Connection conn = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            conn = daoFactory.getConnection();
            preparedStatement = initPreparedStatement(conn, SQL_DELETE, true/*, liste de paramètres à mettre correspondant à la requête */);
            int status = preparedStatement.executeUpdate();

            if (status == 0) {
                throw new DAOException("Echec");
            }

            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if (autoGeneratedValues.next()) {
                subject.setId(autoGeneratedValues.getLong(1));
            } else {
                throw new DAOException("Echec");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            silentClosures(autoGeneratedValues, preparedStatement, conn);
        }
    }

    /*
     * Simple méthode utilitaire permettant de faire la correspondance (le
     * mapping) entre une ligne issue de la table des sujets (un
     * ResultSet) et un bean Subject.
     */
    private static SubjectEntity map(ResultSet resultSet) throws SQLException {
        return new SubjectEntity(
                resultSet.getLong("id"),
                resultSet.getString("name")
        );
    }
}
